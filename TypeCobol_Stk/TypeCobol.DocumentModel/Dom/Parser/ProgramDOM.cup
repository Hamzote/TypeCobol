// JavaCup specification for a simple expression evaluator (w/ actions)

namespace TypeCobol.DocumentModel.Dom.Parser;

using TUVienna.CS_CUP.Runtime;
using System;
using System.Collections;
using System.Collections.Generic;
using TypeCobol.Compiler.CodeElements;
using TypeCobol.DocumentModel.Dom;

/* Terminals (tokens returned by the scanner). */
terminal TypeCobol.Compiler.CodeElements.ProgramIdentification ProgramIdentification;
terminal TypeCobol.Compiler.CodeElements.ProgramEnd ProgramEnd;
terminal TypeCobol.Compiler.CodeElements.ClassIdentification ClassIdentification;
terminal TypeCobol.Compiler.CodeElements.ClassEnd ClassEnd;
terminal TypeCobol.Compiler.CodeElements.FactoryIdentification FactoryIdentification;
terminal TypeCobol.Compiler.CodeElements.FactoryEnd FactoryEnd;
terminal TypeCobol.Compiler.CodeElements.ObjectIdentification ObjectIdentification;
terminal TypeCobol.Compiler.CodeElements.ObjectEnd ObjectEnd;
terminal TypeCobol.Compiler.CodeElements.MethodIdentification MethodIdentification;
terminal TypeCobol.Compiler.CodeElements.MethodEnd MethodEnd;
terminal TypeCobol.Compiler.CodeElements.EnvironmentDivisionHeader EnvironmentDivisionHeader;
terminal TypeCobol.Compiler.CodeElements.DataDivisionHeader DataDivisionHeader;
terminal TypeCobol.Compiler.CodeElements.ProcedureDivisionHeader ProcedureDivisionHeader;
terminal TypeCobol.Compiler.CodeElements.DeclarativesHeader DeclarativesHeader;
terminal TypeCobol.Compiler.CodeElements.DeclarativesEnd DeclarativesEnd;
terminal TypeCobol.Compiler.CodeElements.SectionHeader SectionHeader;
terminal TypeCobol.Compiler.CodeElements.ConfigurationSectionHeader ConfigurationSectionHeader;
terminal TypeCobol.Compiler.CodeElements.InputOutputSectionHeader InputOutputSectionHeader;
terminal TypeCobol.Compiler.CodeElements.FileSectionHeader FileSectionHeader;
terminal TypeCobol.Compiler.CodeElements.WorkingStorageSectionHeader WorkingStorageSectionHeader;
terminal TypeCobol.Compiler.CodeElements.LocalStorageSectionHeader LocalStorageSectionHeader;
terminal TypeCobol.Compiler.CodeElements.LinkageSectionHeader LinkageSectionHeader;
terminal TypeCobol.Compiler.CodeElements.ParagraphHeader ParagraphHeader;
terminal TypeCobol.Compiler.CodeElements.FileControlParagraphHeader FileControlParagraphHeader;
terminal TypeCobol.Compiler.CodeElements.IOControlParagraphHeader IOControlParagraphHeader;
terminal TypeCobol.Compiler.CodeElements.SentenceEnd SentenceEnd;
terminal TypeCobol.Compiler.CodeElements.FileDescriptionEntry FileDescriptionEntry;
terminal TypeCobol.Compiler.CodeElements.DataDescriptionEntry DataDescriptionEntry;
terminal TypeCobol.Compiler.CodeElements.DataRedefinesEntry DataRedefinesEntry;
terminal TypeCobol.Compiler.CodeElements.DataRenamesEntry DataRenamesEntry;
terminal TypeCobol.Compiler.CodeElements.DataConditionEntry DataConditionEntry;
terminal TypeCobol.Compiler.CodeElements.FileControlEntry FileControlEntry;
terminal TypeCobol.Compiler.CodeElements.IOControlEntry IOControlEntry;
terminal TypeCobol.Compiler.CodeElements.SourceComputerParagraph SourceComputerParagraph;
terminal TypeCobol.Compiler.CodeElements.ObjectComputerParagraph ObjectComputerParagraph;
terminal TypeCobol.Compiler.CodeElements.SpecialNamesParagraph SpecialNamesParagraph;
terminal TypeCobol.Compiler.CodeElements.RepositoryParagraph RepositoryParagraph;
terminal TypeCobol.Compiler.CodeElements.AcceptStatement AcceptStatement;
terminal TypeCobol.Compiler.CodeElements.AddStatement AddStatement;
terminal TypeCobol.Compiler.CodeElements.AlterStatement AlterStatement;
terminal TypeCobol.Compiler.CodeElements.CallStatement CallStatement;
terminal TypeCobol.Compiler.CodeElements.CancelStatement CancelStatement;
terminal TypeCobol.Compiler.CodeElements.CloseStatement CloseStatement;
terminal TypeCobol.Compiler.CodeElements.ComputeStatement ComputeStatement;
terminal TypeCobol.Compiler.CodeElements.ContinueStatement ContinueStatement;
terminal TypeCobol.Compiler.CodeElements.DeleteStatement DeleteStatement;
terminal TypeCobol.Compiler.CodeElements.DisplayStatement DisplayStatement;
terminal TypeCobol.Compiler.CodeElements.DivideStatement DivideStatement;
terminal TypeCobol.Compiler.CodeElements.EntryStatement EntryStatement;
terminal TypeCobol.Compiler.CodeElements.EvaluateStatement EvaluateStatement;
terminal TypeCobol.Compiler.CodeElements.ExecStatement ExecStatement;
terminal TypeCobol.Compiler.CodeElements.ExitMethodStatement ExitMethodStatement;
terminal TypeCobol.Compiler.CodeElements.ExitProgramStatement ExitProgramStatement;
terminal TypeCobol.Compiler.CodeElements.ExitStatement ExitStatement;
terminal TypeCobol.Compiler.CodeElements.GobackStatement GobackStatement;
terminal TypeCobol.Compiler.CodeElements.GotoStatement GotoStatement;
terminal TypeCobol.Compiler.CodeElements.IfStatement IfStatement;
terminal TypeCobol.Compiler.CodeElements.InitializeStatement InitializeStatement;
terminal TypeCobol.Compiler.CodeElements.InspectStatement InspectStatement;
terminal TypeCobol.Compiler.CodeElements.InvokeStatement InvokeStatement;
terminal TypeCobol.Compiler.CodeElements.MergeStatement MergeStatement;
terminal TypeCobol.Compiler.CodeElements.MoveStatement MoveStatement;
terminal TypeCobol.Compiler.CodeElements.MultiplyStatement MultiplyStatement;
terminal TypeCobol.Compiler.CodeElements.NextSentenceStatement NextSentenceStatement;
terminal TypeCobol.Compiler.CodeElements.OpenStatement OpenStatement;
terminal TypeCobol.Compiler.CodeElements.PerformProcedureStatement PerformProcedureStatement;
terminal TypeCobol.Compiler.CodeElements.PerformStatement PerformStatement;
terminal TypeCobol.Compiler.CodeElements.ReadStatement ReadStatement;
terminal TypeCobol.Compiler.CodeElements.ReleaseStatement ReleaseStatement;
terminal TypeCobol.Compiler.CodeElements.ReturnStatement ReturnStatement;
terminal TypeCobol.Compiler.CodeElements.RewriteStatement RewriteStatement;
terminal TypeCobol.Compiler.CodeElements.SearchStatement SearchStatement;
terminal TypeCobol.Compiler.CodeElements.SetStatement SetStatement;
terminal TypeCobol.Compiler.CodeElements.SortStatement SortStatement;
terminal TypeCobol.Compiler.CodeElements.StartStatement StartStatement;
terminal TypeCobol.Compiler.CodeElements.StopStatement StopStatement;
terminal TypeCobol.Compiler.CodeElements.StringStatement StringStatement;
terminal TypeCobol.Compiler.CodeElements.SubtractStatement SubtractStatement;
terminal TypeCobol.Compiler.CodeElements.UnstringStatement UnstringStatement;
terminal TypeCobol.Compiler.CodeElements.UseStatement UseStatement;
terminal TypeCobol.Compiler.CodeElements.WriteStatement WriteStatement;
terminal TypeCobol.Compiler.CodeElements.XmlGenerateStatement XmlGenerateStatement;
terminal TypeCobol.Compiler.CodeElements.XmlParseStatement XmlParseStatement;
terminal TypeCobol.Compiler.CodeElements.AtEndCondition AtEndCondition;
terminal TypeCobol.Compiler.CodeElements.NotAtEndCondition NotAtEndCondition;
terminal TypeCobol.Compiler.CodeElements.AtEndOfPageCondition AtEndOfPageCondition;
terminal TypeCobol.Compiler.CodeElements.NotAtEndOfPageCondition NotAtEndOfPageCondition;
terminal TypeCobol.Compiler.CodeElements.OnExceptionCondition OnExceptionCondition;
terminal TypeCobol.Compiler.CodeElements.NotOnExceptionCondition NotOnExceptionCondition;
terminal TypeCobol.Compiler.CodeElements.OnOverflowCondition OnOverflowCondition;
terminal TypeCobol.Compiler.CodeElements.NotOnOverflowCondition NotOnOverflowCondition;
terminal TypeCobol.Compiler.CodeElements.InvalidKeyCondition InvalidKeyCondition;
terminal TypeCobol.Compiler.CodeElements.NotInvalidKeyCondition NotInvalidKeyCondition;
terminal TypeCobol.Compiler.CodeElements.OnSizeErrorCondition OnSizeErrorCondition;
terminal TypeCobol.Compiler.CodeElements.NotOnSizeErrorCondition NotOnSizeErrorCondition;
terminal TypeCobol.Compiler.CodeElements.ElseCondition ElseCondition;
terminal TypeCobol.Compiler.CodeElements.WhenCondition WhenCondition;
terminal TypeCobol.Compiler.CodeElements.WhenOtherCondition WhenOtherCondition;
terminal TypeCobol.Compiler.CodeElements.WhenSearchCondition WhenSearchCondition;
terminal TypeCobol.Compiler.CodeElements.AddStatementEnd AddStatementEnd;
terminal TypeCobol.Compiler.CodeElements.CallStatementEnd CallStatementEnd;
terminal TypeCobol.Compiler.CodeElements.ComputeStatementEnd ComputeStatementEnd;
terminal TypeCobol.Compiler.CodeElements.DeleteStatementEnd DeleteStatementEnd;
terminal TypeCobol.Compiler.CodeElements.DivideStatementEnd DivideStatementEnd;
terminal TypeCobol.Compiler.CodeElements.EvaluateStatementEnd EvaluateStatementEnd;
terminal TypeCobol.Compiler.CodeElements.IfStatementEnd IfStatementEnd;
terminal TypeCobol.Compiler.CodeElements.InvokeStatementEnd InvokeStatementEnd;
terminal TypeCobol.Compiler.CodeElements.MultiplyStatementEnd MultiplyStatementEnd;
terminal TypeCobol.Compiler.CodeElements.PerformStatementEnd PerformStatementEnd;
terminal TypeCobol.Compiler.CodeElements.ReadStatementEnd ReadStatementEnd;
terminal TypeCobol.Compiler.CodeElements.ReturnStatementEnd ReturnStatementEnd;
terminal TypeCobol.Compiler.CodeElements.RewriteStatementEnd RewriteStatementEnd;
terminal TypeCobol.Compiler.CodeElements.SearchStatementEnd SearchStatementEnd;
terminal TypeCobol.Compiler.CodeElements.StartStatementEnd StartStatementEnd;
terminal TypeCobol.Compiler.CodeElements.StringStatementEnd StringStatementEnd;
terminal TypeCobol.Compiler.CodeElements.SubtractStatementEnd SubtractStatementEnd;
terminal TypeCobol.Compiler.CodeElements.UnstringStatementEnd UnstringStatementEnd;
terminal TypeCobol.Compiler.CodeElements.WriteStatementEnd WriteStatementEnd;
terminal TypeCobol.Compiler.CodeElements.XmlStatementEnd XmlStatementEnd;
terminal TypeCobol.Compiler.CodeElements.LibraryCopyCodeElement LibraryCopy;
terminal TypeCobol.Compiler.CodeElements.FunctionDeclarationHeader FunctionDeclarationHeader;
terminal TypeCobol.Compiler.CodeElements.FunctionDeclarationEnd FunctionDeclarationEnd;
terminal TypeCobol.Compiler.CodeElements.ProcedureStyleCallStatement ProcedureStyleCall;
terminal TypeCobol.Compiler.CodeElements.Program Program;

/* Non terminals */
non terminal TypeCobol.DocumentModel.Dom.CobolProgram    cobolCompilationUnit, cobolProgram, cobolProgramBase, nestedProgram;
non terminal TypeCobol.DocumentModel.Dom.ProgramAttributes    programAttributes;
non terminal TypeCobol.Compiler.CodeElements.LibraryCopyCodeElement LibraryCopyOpt;
non terminal TypeCobol.Compiler.CodeElements.ProgramEnd ProgramEndOpt;
non terminal TypeCobol.DocumentModel.Dom.NestedPrograms nestedProgramOpt;

non terminal TypeCobol.DocumentModel.Dom.EnvironmentDivision environmentDivisionOpt, environmentDivision;
non terminal TypeCobol.DocumentModel.Dom.ConfigurationSection configurationSectionOpt, configurationSection;
non terminal TypeCobol.DocumentModel.Dom.InputOutputSection inputOutputSectionOpt, inputOutputSection;
non terminal TypeCobol.DocumentModel.Dom.ConfigurationParagraphs configurationParagraphs;
non terminal TypeCobol.DocumentModel.Dom.ConfigurationParagraph configurationParagraph;
non terminal TypeCobol.DocumentModel.Dom.FileControlParagraph fileControlParagraphOpt, fileControlParagraph;
non terminal TypeCobol.DocumentModel.Dom.FileControlEntries fileControlEntriesOpt, fileControlEntries;
non terminal TypeCobol.DocumentModel.Dom.IoControlParagraph ioControlParagraphOpt, ioControlParagraph, ioControlSentencesOpt;
non terminal TypeCobol.DocumentModel.Dom.IOControlEntries ioControlEntries;

non terminal TypeCobol.DocumentModel.Dom.DataDefinitionEntry dataDefinitionEntry;
non terminal TypeCobol.DocumentModel.Dom.DataDefinitionEntries dataDefinitionEntries, dataDefinitionEntriesOpt;
non terminal TypeCobol.DocumentModel.Dom.ExecSqlStatement execSqlStatement;
non terminal TypeCobol.DocumentModel.Dom.StorageEntry storageEntry;
non terminal TypeCobol.DocumentModel.Dom.StorageEntries storageEntries;
non terminal TypeCobol.DocumentModel.Dom.FileDescription fileDescriptionEntry;
non terminal TypeCobol.DocumentModel.Dom.FileDescriptionEntries fileDescriptionEntries;
non terminal TypeCobol.DocumentModel.Dom.FileSection fileSection;
non terminal TypeCobol.DocumentModel.Dom.WorkingStorageSection workingStorageSection;
non terminal TypeCobol.DocumentModel.Dom.LocalStorageSection localStorageSection;
non terminal TypeCobol.DocumentModel.Dom.LinkageSection linkageSection;
non terminal TypeCobol.DocumentModel.Dom.DataDivision dataDivisionOpt, dataDivision;

non terminal TypeCobol.DocumentModel.Dom.ProcedureDivision procedureDivision, procedureDivisionOpt;
non terminal TypeCobol.DocumentModel.Dom.Statement statement, singleStatement, compoundStatement;
non terminal TypeCobol.DocumentModel.Dom.Statements statements;
non terminal TypeCobol.DocumentModel.Dom.Sentence sentence;
non terminal TypeCobol.DocumentModel.Dom.Sentences sentences, sentencesOpt;
non terminal TypeCobol.DocumentModel.Dom.Paragraph paragraph;
non terminal TypeCobol.DocumentModel.Dom.Paragraphs paragraphs;
non terminal TypeCobol.DocumentModel.Dom.Section section;
non terminal TypeCobol.DocumentModel.Dom.Sections sections, declarativesSections;
non terminal TypeCobol.DocumentModel.Dom.Section.Declarative declarativesSection;
non terminal TypeCobol.DocumentModel.Dom.Declaratives declaratives, declarativesOpt;
non terminal TypeCobol.DocumentModel.Dom.FunctionDeclaration functionDeclaration;
non terminal TypeCobol.DocumentModel.Dom.ProcedureDivision functionProcedureDivision, functionProcedureDivisionOpt;
non terminal TypeCobol.DocumentModel.Dom.ProcedureDivision.Element functionOrSectionDeclaration;
non terminal TypeCobol.DocumentModel.Dom.ProcedureDivision.Elements functionOrSectionDeclarations;

non terminal TypeCobol.DocumentModel.Dom.EndCondition onAtEnd, noAtEnd;
non terminal TypeCobol.DocumentModel.Dom.EndConditions endConditions;
non terminal TypeCobol.DocumentModel.Dom.ExceptionCondition onException, noException;
non terminal TypeCobol.DocumentModel.Dom.ExceptionConditions exceptionConditions;
non terminal TypeCobol.DocumentModel.Dom.KeyCondition onInvalidKey, noInvalidKey;
non terminal TypeCobol.DocumentModel.Dom.KeyConditions keyConditions;
non terminal TypeCobol.DocumentModel.Dom.OverflowCondition onOverflow, noOverflow;
non terminal TypeCobol.DocumentModel.Dom.OverflowConditions overflowConditions;
non terminal TypeCobol.DocumentModel.Dom.SizeErrorCondition onSizeError, noSizeError;
non terminal TypeCobol.DocumentModel.Dom.SizeErrorConditions sizeErrorConditions;

non terminal TypeCobol.DocumentModel.Dom.CompoundStatement.AddConditional addStatementConditional;

precedence left SentenceEnd;
precedence left AcceptStatement, AddStatement, AlterStatement, CallStatement, CancelStatement,
			CloseStatement, ComputeStatement, ContinueStatement, DeleteStatement, DisplayStatement,
			DivideStatement, EntryStatement, EntryStatement, ExitMethodStatement, ExitProgramStatement,
			ExitStatement, GobackStatement, GotoStatement, InitializeStatement, InspectStatement,
			InvokeStatement, MergeStatement, MoveStatement, MultiplyStatement, OpenStatement,
			PerformProcedureStatement, ReadStatement, ReleaseStatement, ReturnStatement,
			RewriteStatement, SetStatement, SortStatement, StartStatement, StopStatement,
			StringStatement, SubtractStatement, UnstringStatement, WriteStatement, XmlGenerateStatement,
			XmlParseStatement, ProcedureStyleCall, ExecStatement;


/* The grammar */
cobolCompilationUnit ::= cobolProgram:cp
/*
	| cobolClass
*/
	{: RESULT = cp; :}
	;

/*
// --- COBOL PROGRAM ---
*/

cobolProgram ::=
	cobolProgramBase:cpb
    nestedProgramOpt:nsp
	ProgramEndOpt:pe
	{: 
		RESULT = cpb; 
		cpb.NestedPrograms = nsp;
		cpb.ProgramEnd = pe;
	:}
	;

cobolProgramBase ::=
	programAttributes:pas
	environmentDivisionOpt:ed
	dataDivisionOpt:dv
	procedureDivisionOpt:pdiv
	{: 
		RESULT = new CobolProgram(); 
		RESULT.ProgramAttributes = pas;
		RESULT.EnvironmentDivision = ed;
		RESULT.DataDivision = dv;
		RESULT.ProcedureDivision = pdiv;
	:}
	;

programAttributes ::= ProgramIdentification:pid LibraryCopyOpt:lc
	{: RESULT = new ProgramAttributes(pid, lc); :}
	;

LibraryCopyOpt ::= /*empty */
	{: RESULT = null; :}
	| LibraryCopy:lc
	{: RESULT = lc; :}
	;

ProgramEndOpt ::= /* empty */
	| ProgramEnd:pe
	{: RESULT = pe; :}
	;

nestedProgram ::= 	
	cobolProgramBase:cpb
    nestedProgramOpt:nsp
	ProgramEnd:pe
	{: 
		RESULT = cpb; 
		cpb.NestedPrograms = nsp;
		cpb.ProgramEnd = pe;
	:}
	;

nestedProgramOpt ::= /* Empty */
	{: RESULT = new NestedPrograms(); :}
	| nestedProgramOpt:nsp nestedProgram:np
	{: RESULT = nsp; nsp.Add(np); :}
	;

/*
// --- ENVIRONMENT DIVISION ---
*/

environmentDivisionOpt ::= /*empty*/
	{: RESULT = null; :}
	| environmentDivision:ed
	{: RESULT = ed; :}
	;

environmentDivision ::=
	EnvironmentDivisionHeader:edh  
	configurationSectionOpt:cs
	inputOutputSectionOpt:ioc
	{: RESULT = new TypeCobol.DocumentModel.Dom.EnvironmentDivision(edh, cs, ioc); :}
	;

configurationSectionOpt ::= /*empty*/
	{: RESULT = null; :}
	| configurationSection:cs
	{: RESULT = cs; :}
	;

configurationSection ::= ConfigurationSectionHeader:csh
	{: RESULT = new ConfigurationSection(csh); :}
	| ConfigurationSectionHeader:csh configurationParagraphs:cps
	{: RESULT = new ConfigurationSection(csh,cps); :}
	;

configurationParagraphs ::= configurationParagraph:cp
		{: RESULT = new ConfigurationParagraphs(); RESULT.Add(cp); :}
	| configurationParagraphs:cps configurationParagraph:cp
		{: RESULT = cps; cps.Add(cp); :}
	;

configurationParagraph ::= SourceComputerParagraph:scp
	{: RESULT = new ConfigurationParagraph.SourceComputer(scp); :}
	| ObjectComputerParagraph:ocp
	{: RESULT = new ConfigurationParagraph.ObjectComputer(ocp); :}
	| SpecialNamesParagraph:snp
	{: RESULT = new ConfigurationParagraph.SpecialNames(snp); :}
	| RepositoryParagraph:rp
	{: RESULT = new ConfigurationParagraph.Repository(rp); :}
	;

inputOutputSectionOpt ::= /*empty*/
	{: RESULT = null; :}
	| inputOutputSection:ios
	{: RESULT = ios; :}
	;

inputOutputSection ::= 
	InputOutputSectionHeader:iosh
	fileControlParagraphOpt:fcp
	ioControlParagraphOpt:iocp
	{: RESULT = new InputOutputSection(iosh, fcp, iocp);  :}
	;

fileControlParagraphOpt ::= /*empty*/
	{: RESULT = null; :}
	| fileControlParagraph:fcp
	{: RESULT = fcp; :}
	;

fileControlParagraph ::=
	FileControlParagraphHeader:fcph
	fileControlEntriesOpt:fces
	{: 
		RESULT = new FileControlParagraph(); 
		RESULT.FileControlParagraphHeader = fcph;
		RESULT.FileControlEntries = fces;
	:}
	;

fileControlEntriesOpt ::= /*empty*/
		{: RESULT = null; :}
	| fileControlEntries:fces
		{: RESULT = fces; :}
	;

fileControlEntries ::= FileControlEntry:fce
		{: RESULT = new FileControlEntries(); RESULT.Add(fce); :}
	| fileControlEntries:fces FileControlEntry:fce
		{: RESULT = fces; fces.Add(fce); :}
	;

ioControlParagraphOpt ::= /*empty*/
		{: RESULT = null; :}
	| ioControlParagraph:iocp
		{: RESULT = iocp; :}
	;

ioControlParagraph ::= 
	IOControlParagraphHeader:iocph
	ioControlSentencesOpt:iocs
	{: RESULT = iocs; iocs.IOControlParagraphHeader = iocph; :}
	;

ioControlSentencesOpt ::= /* empty */	
		{: RESULT = new IoControlParagraph(); :}
	| ioControlEntries:ioces SentenceEnd:se
		{:	RESULT = new IoControlParagraph(); 
			RESULT.IOControlEntries = ioces; 
			RESULT.SentenceEnd = se;
		:}
	;

ioControlEntries ::= IOControlEntry:ioce
		{: RESULT = new IOControlEntries(); RESULT.Add(ioce); :}
	| ioControlEntries:ioces IOControlEntry:ioce
		{: RESULT = ioces; ioces.Add(ioce); :}
	;


/*
// --- DATA DIVISION ---
*/
dataDivisionOpt ::= /*empty*/
	{: RESULT = null; :}
	| dataDivision:dv
	{: RESULT = dv; :}
	;

dataDivision ::=
	DataDivisionHeader:ddh
	fileSection:fs
	workingStorageSection :wss
	localStorageSection:lss
	linkageSection:ls
	{: 
		RESULT = new DataDivision(ddh);
		RESULT.FileSection = fs;
		RESULT.WorkingStorageSection = wss;
		RESULT.LocalStorageSection = lss;
		RESULT.LinkageSection = ls;
	:}
	;

fileSection ::= /*empty*/
	{: RESULT = null; :}
	| FileSectionHeader:feh fileDescriptionEntries:des
	{: RESULT = new FileSection(feh, des); :}
	;

fileDescriptionEntries ::= /*empty*/
	{: RESULT = new TypeCobol.DocumentModel.Dom.FileDescriptionEntries(); :}
	| fileDescriptionEntries:fdes fileDescriptionEntry:fde
	{: RESULT = fdes; fdes.Add(fde); :}
	;

fileDescriptionEntry ::= FileDescriptionEntry:fde dataDefinitionEntries:dfes
	{: RESULT = new TypeCobol.DocumentModel.Dom.FileDescription(fde, dfes); :}
	;

workingStorageSection ::= /*empty*/
	{: RESULT = null; :}
	| WorkingStorageSectionHeader:wssh storageEntries:ses
	{: RESULT = new WorkingStorageSection(wssh, ses); :}
	;

storageEntries ::= /*empty*/
	{: RESULT = new TypeCobol.DocumentModel.Dom.StorageEntries(); :}
	| storageEntries:ses storageEntry:se
	{: RESULT = ses; ses.Add(se); :}
	;

storageEntry ::= dataDefinitionEntry:dde
	{: RESULT = new TypeCobol.DocumentModel.Dom.StorageEntry.DataDefinition(dde); :}
	| execSqlStatement:ess
	{: RESULT = new TypeCobol.DocumentModel.Dom.StorageEntry.ExecSql(ess); :}
	;

execSqlStatement ::= ExecStatement:es
	{: RESULT = new ExecSqlStatement(es); :}
	| ExecStatement:es SentenceEnd:se
	{: RESULT = new ExecSqlStatement(es, se); :}
	;

localStorageSection ::= /*empty*/
	{: RESULT = null; :}
	| LocalStorageSectionHeader:lsh storageEntries:ses
	{: RESULT = new LocalStorageSection(lsh, ses); :}
	;

dataDefinitionEntriesOpt ::= /*empty*/
	{: RESULT = new TypeCobol.DocumentModel.Dom.DataDefinitionEntries(); :}
	| dataDefinitionEntries:ddes
	{: RESULT = ddes; :}
	;

dataDefinitionEntries ::= dataDefinitionEntry:dde
	{: RESULT = new TypeCobol.DocumentModel.Dom.DataDefinitionEntries(); RESULT.Add(dde); :}
	| dataDefinitionEntries:ddes dataDefinitionEntry:dde
	{: RESULT = ddes; ddes.Add(dde); :}
	;

dataDefinitionEntry ::=
	  DataDescriptionEntry:dde
	{: RESULT = new TypeCobol.DocumentModel.Dom.DataDefinitionEntry.DataDescription(dde); :}
	| DataRedefinesEntry:dre
	{: RESULT = new TypeCobol.DocumentModel.Dom.DataDefinitionEntry.DataRedefines(dre); :}
	| DataRenamesEntry:dre
	{: RESULT = new TypeCobol.DocumentModel.Dom.DataDefinitionEntry.DataRenames(dre); :}
	| DataConditionEntry:dce
	{: RESULT = new TypeCobol.DocumentModel.Dom.DataDefinitionEntry.DataCondition(dce); :}
	;

linkageSection ::= /*empty*/
	{: RESULT = null; :}
	| LinkageSectionHeader:lsh dataDefinitionEntriesOpt:ddes
	{: RESULT = new LinkageSection(lsh, ddes); :}
	;

procedureDivisionOpt ::= /*empty*/
	{: RESULT = null; :}
	| procedureDivision:pdiv
	{: RESULT = pdiv; :}
	;

procedureDivision ::=
	ProcedureDivisionHeader:pdh 
	declarativesOpt:decls
	functionOrSectionDeclarations:elems
	{:
		RESULT = new ProcedureDivision(pdh); 
		RESULT.Declaratives = decls;
		RESULT.ProcedureElements = elems;
	:}
	;

functionOrSectionDeclarations ::= /*empty*/
	{: RESULT = new ProcedureDivision.Elements(); :}
	| functionOrSectionDeclarations:elems functionOrSectionDeclaration:elem
	{: RESULT = elems; elems.Add(elem); :}
	;

functionOrSectionDeclaration ::= functionDeclaration:fd
	{: RESULT = new ProcedureDivision.Element.Function(fd); :}
	| section:s
	{: RESULT = new ProcedureDivision.Element.Section(s); :}
	;

functionDeclaration ::=
	FunctionDeclarationHeader:fdh
	dataDivisionOpt:dv
	functionProcedureDivisionOpt:fpd
	FunctionDeclarationEnd:fe
	{:
		RESULT = new FunctionDeclaration(fdh); 
		RESULT.DataDivision = dv;
		RESULT.ProcedureDivision = fpd;
		RESULT.FunctionDeclarationEnd = fe;
	:}
	;

functionProcedureDivisionOpt ::= /*empty*/
	{: RESULT = null; :}
	| functionProcedureDivision:fpd
	{: RESULT = fpd; :}
	;

functionProcedureDivision ::=
	ProcedureDivisionHeader:pdh 
	{: RESULT = new ProcedureDivision(pdh, null); :}
| 	ProcedureDivisionHeader:pdh sections:alls
	{: RESULT = new ProcedureDivision(pdh, alls); :}

	;


declarativesOpt ::= /*empty*/
	{: RESULT = null; :}
	| declaratives:decls
	{: RESULT = decls; :}
	;

declaratives ::=
	DeclarativesHeader:dh
	declarativesSections:decls
	DeclarativesEnd:de
	{: RESULT = new Declaratives(dh, decls,de); :}
	;


declarativesSections ::= declarativesSection:ds
	{: RESULT = new Sections(); RESULT.Add(ds); :}
	| declarativesSections:decls declarativesSection:ds
	{: RESULT = decls; decls.Add(ds); :}
	;

declarativesSection ::= SectionHeader:sh UseStatement:us paragraphs:p
	{: RESULT = new Section.Declarative(sh, us, p); :}
	;

sections ::= section:s
	{: RESULT = new Sections(); RESULT.Add(s); :}
	| sections:alls section:s
	{: RESULT = alls; alls.Add(s); :}
	;

section ::= SectionHeader:sh 
	{: RESULT = new Section.Standard(sh, null); :}
	| SectionHeader:sh paragraphs:ps
	{: RESULT = new Section.Standard(sh, ps); :}
	| ParagraphHeader:ph 
	{: RESULT = new Section.Paragraph(ph, null); :}
	| ParagraphHeader:ph paragraphs:ps
	{: RESULT = new Section.Paragraph(ph, ps); :}
	| sentences:alls
	{: RESULT = new Section.Sentences(alls); :}
	;

paragraphs ::= paragraph:p
	{: RESULT = new Paragraphs(); RESULT.Add(p); :}
	| paragraphs:ps paragraph:p
	{: RESULT = ps; ps.Add(p); :}
	;

paragraph ::= ParagraphHeader:ph sentencesOpt:alls
	{: RESULT = new Paragraph(ph, alls); :}
	| sentences:alls
	{: RESULT = new Paragraph(alls); :}
	;

sentencesOpt ::= /*empty*/
	{: RESULT = new Sentences(); :}
	| sentences:alls
	{: RESULT = alls; :}
	;

sentences ::= sentence:s
	{: RESULT = new Sentences(); RESULT.Add(s); :}
	| sentences:alls sentence:s
	{: RESULT = alls; alls.Add(s); :}
	;

sentence ::= SentenceEnd:send
	{: RESULT = new Sentence(send); :}
    | statements:stmts SentenceEnd:send
	{: RESULT = new Sentence(stmts, send); :}
	| ExecStatement:stmt
	{: RESULT = new Sentence(new SingleStatement.ExecStatement(stmt)); :}
	;

statements ::= statement:stmt
	{: RESULT = new Statements(); RESULT.Add(stmt); :}
	| statements:stmts statement:stmt
	{: RESULT = stmts; stmts.Add(stmt); :}
	;

statement ::= singleStatement:stmt
	{: RESULT = stmt; :}
	| compoundStatement:stmt
	{: RESULT = stmt; :}
	;

singleStatement ::=
	ContinueStatement:stmt
	{: RESULT = new SingleStatement.ContinueStatement(stmt); :}
	| EntryStatement:stmt
	{: RESULT = new SingleStatement.EntryStatement(stmt); :}
// -- arithmetic --
	| AddStatement:stmt
	{: RESULT = new SingleStatement.AddStatement(stmt); :}
	| ComputeStatement:stmt
	{: RESULT = new SingleStatement.ComputeStatement(stmt); :}
	| DivideStatement:stmt
	{: RESULT = new SingleStatement.DivideStatement(stmt); :}
	| MultiplyStatement:stmt
	{: RESULT = new SingleStatement.MultiplyStatement(stmt); :}
	| SubtractStatement:stmt
	{: RESULT = new SingleStatement.SubtractStatement(stmt); :}
// -- data movement --
	| AcceptStatement:stmt // (DATE, DAY, DAY-OF-WEEK, TIME)
	{: RESULT = new SingleStatement.AcceptStatement(stmt); :} 
	| InitializeStatement:stmt
	{: RESULT = new SingleStatement.InitializeStatement(stmt); :}
	| InspectStatement:stmt
	{: RESULT = new SingleStatement.InspectStatement(stmt); :}
	| MoveStatement:stmt
	{: RESULT = new SingleStatement.MoveStatement(stmt); :}
	| SetStatement:stmt
	{: RESULT = new SingleStatement.SetStatement(stmt); :}
	| StringStatement:stmt
	{: RESULT = new SingleStatement.StringStatement(stmt); :}
	| UnstringStatement:stmt
	{: RESULT = new SingleStatement.UnstringStatement(stmt); :}
	| XmlGenerateStatement:stmt
	{: RESULT = new SingleStatement.XmlGenerateStatement(stmt); :}
	| XmlParseStatement:stmt
	{: RESULT = new SingleStatement.XmlParseStatement(stmt); :}
// -- ending --
	| StopStatement:stmt
	{: RESULT = new SingleStatement.StopStatement(stmt); :}
	| ExitMethodStatement:stmt
	{: RESULT = new SingleStatement.ExitMethodStatement(stmt); :}
	| ExitProgramStatement:stmt
	{: RESULT = new SingleStatement.ExitProgramStatement(stmt); :}
	| GobackStatement:stmt
	{: RESULT = new SingleStatement.GobackStatement(stmt); :}
// -- input-output --
	| CloseStatement:stmt
	{: RESULT = new SingleStatement.CloseStatement(stmt); :}
	| DeleteStatement:stmt
	{: RESULT = new SingleStatement.DeleteStatement(stmt); :}
	| DisplayStatement:stmt
	{: RESULT = new SingleStatement.DisplayStatement(stmt); :}
	| OpenStatement:stmt
	{: RESULT = new SingleStatement.OpenStatement(stmt); :}
	| ReadStatement:stmt
	{: RESULT = new SingleStatement.ReadStatement(stmt); :}
	| RewriteStatement:stmt
	{: RESULT = new SingleStatement.RewriteStatement(stmt); :}
	| StartStatement:stmt
	{: RESULT = new SingleStatement.StartStatement(stmt); :}
//	StopStatement // literal
	| WriteStatement:stmt
	{: RESULT = new SingleStatement.WriteStatement(stmt); :}
// -- ordering --
	| MergeStatement:stmt
	{: RESULT = new SingleStatement.MergeStatement(stmt); :}
	| ReleaseStatement:stmt
	{: RESULT = new SingleStatement.ReleaseStatement(stmt); :}
	| ReturnStatement:stmt
	{: RESULT = new SingleStatement.ReturnStatement(stmt); :}
	| SortStatement:stmt
	{: RESULT = new SingleStatement.SortStatement(stmt); :}
// -- procedure-branching --
	| AlterStatement:stmt
	{: RESULT = new SingleStatement.AlterStatement(stmt); :}
	| ExitStatement:stmt
	{: RESULT = new SingleStatement.ExitStatement(stmt); :}
	| GotoStatement:stmt
	{: RESULT = new SingleStatement.GotoStatement(stmt); :}
	| PerformProcedureStatement:stmt
	{: RESULT = new SingleStatement.PerformProcedureStatement(stmt); :}
// -- program or method linkage --
	| CallStatement:stmt
	{: RESULT = new SingleStatement.CallStatement(stmt); :}
	| ProcedureStyleCall:stmt
	{: RESULT = new SingleStatement.ProcedureStyleCall(stmt); :}
	| CancelStatement:stmt
	{: RESULT = new SingleStatement.CancelStatement(stmt); :}
	| InvokeStatement:stmt
	{: RESULT = new SingleStatement.InvokeStatement(stmt); :}
// -- DB2 & CICS integration --
	| ExecStatement:stmt
	{: RESULT = new SingleStatement.ExecStatement(stmt); :}
	;
	
// Statements with optional body  
compoundStatement ::= addStatementConditional:stmt
	{: RESULT = stmt; :}
	;

addStatementConditional ::=
		AddStatement:stmt AddStatementEnd:end
		{: RESULT = new CompoundStatement.AddConditional(stmt, null, end); :}
	|	AddStatement:stmt sizeErrorConditions:conds
		{: RESULT = new CompoundStatement.AddConditional(stmt, conds); :}
	|	AddStatement:stmt sizeErrorConditions:conds AddStatementEnd:end
		{: RESULT = new CompoundStatement.AddConditional(stmt, conds, end); :}
	;

// Conditional execution of statements

onAtEnd ::= AtEndCondition:cond statements:stmts
	{: RESULT = new EndCondition.At(cond, stmts); :}
	;
noAtEnd ::= NotAtEndCondition statements
	{: RESULT = new EndCondition.NotAt(cond, stmts); :}
	;
endConditions ::= /* empty*/ 
	{: RESULT = new EndConditions(); :}
	| onAtEnd:at
	{: RESULT = new EndConditions(); RESULT.Add(at); :}
	| noAtEnd:no_at
	{: RESULT = new EndConditions(); RESULT.Add(no_at); :}
	| endConditions:econds onAtEnd:at
	{: RESULT = econds; econds.Add(at); :}
	| endConditions:econds noAtEnd:no_at
	{: RESULT = econds; econds.Add(no_at); :}
	;

onException ::= OnExceptionCondition:cond statement:stmts
	{: RESULT = new ExceptionCondition.On(cond, stmts); :}
	;
noException ::= NotOnExceptionCondition:cond statement:stmts
	{: RESULT = new ExceptionCondition.NotOn(cond, stmts); :}
	;
exceptionConditions ::= /* empty*/ 
	{: RESULT = new ExceptionConditions(); :}
	| onException:on
	{: RESULT = new ExceptionConditions(); RESULT.Add(on); :}
	| noException:not_on
	{: RESULT = new ExceptionConditions(); RESULT.Add(not_on); :}
	| exceptionConditions:econds onException:on
	{: RESULT = econds; econds.Add(on); :}
	| exceptionConditions:econds noException:not_on
	{: RESULT = econds; econds.Add(not_on); :}
	;


onInvalidKey ::= InvalidKeyCondition:cond statement:stmts
	{: RESULT = new KeyCondition.Invalid(cond, stmts); :}
	;
noInvalidKey ::= NotInvalidKeyCondition:cond statement:stmts
	{: RESULT = new KeyCondition.NotInvalid(cond, stmts); :}
	;
keyConditions ::= /* empty*/ 
	{: RESULT = new KeyConditions(); :}
	| onInvalidKey:invalid
	{: RESULT = new KeyConditions(); RESULT.Add(invalid); :}
	| noInvalidKey:not_invalid
	{: RESULT = new KeyConditions(); RESULT.Add(not_invalid); :}
	| keyConditions:kconds onInvalidKey:valid
	{: RESULT = kconds; kconds.Add(valid); :}
	| endConditions:kconds noInvalidKey:not_invalid
	{: RESULT = kconds; kconds.Add(not_invalid); :}
	;

onOverflow ::= OnOverflowCondition:cond statement:stmts
	{: RESULT = new OverflowCondition.On(cond, stmts); :}
	;
noOverflow ::= NotOnOverflowCondition:cond statement:stmts
	{: RESULT = new OverflowCondition.NotOn(cond, stmts); :}
	;
overflowConditions ::= /* empty*/ 
	{: RESULT = new OverflowConditions(); :}
	| onOverflow:on
	{: RESULT = new OverflowConditions(); RESULT.Add(on); :}
	| noOverflow:not_on
	{: RESULT = new OverflowConditions(); RESULT.Add(not_on); :}
	| overflowConditions:oconds onOverflow:on
	{: RESULT = oconds; oconds.Add(on); :}
	| overflowConditions:oconds noOverflow:not_on
	{: RESULT = oconds; oconds.Add(not_on); :}
	;

onSizeError ::= OnSizeErrorCondition:cond statement:stmts
	{: RESULT = new SizeErrorCondition.On(cond, stmts); :}
	;
noSizeError ::= NotOnSizeErrorCondition:cond statement:stmts
	{: RESULT = new SizeErrorCondition.On(cond, stmts); :}
	;
sizeErrorConditions ::= 
	  onSizeError:on
	{: RESULT = new SizeErrorConditions(); RESULT.Add(on); :}
	| noSizeError:not_on
	{: RESULT = new SizeErrorConditions(); RESULT.Add(not_on); :}
	| sizeErrorConditions:seconds onSizeError:on
	{: RESULT = seconds; seconds.Add(on); :}
	| sizeErrorConditions:seconds noSizeError:not_on
	{: RESULT = seconds; seconds.Add(not_on); :}
	;
